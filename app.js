// Disco240 P1 ÏôÑÏ†Ñ Í∞ÄÏù¥Îìú JavaScript

document.addEventListener('DOMContentLoaded', () => {
    // ÌÉ≠ ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò Ï¥àÍ∏∞Ìôî
    initTabNavigation();
    
    // Í≤ÄÏÉâ Í∏∞Îä• Ï¥àÍ∏∞Ìôî
    initSearchFunction();
    
    // Í≥ÑÏÇ∞Í∏∞ Í∏∞Îä• Ï¥àÍ∏∞Ìôî
    initCalculators();
    
    // P1 Í∞ÄÏÉÅ Ïª®Ìä∏Î°§ Ìå®ÎÑê Ï¥àÍ∏∞Ìôî
    initP1ControlPanel();
    
    // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ ÏÑ§Ï†ï
    setupKeyboardShortcuts();
    
    console.log('üéõÔ∏è Disco240 P1 ÏôÑÏ†Ñ Í∞ÄÏù¥Îìú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏù¥ Î°úÎìúÎêòÏóàÏäµÎãàÎã§.');
});

function initTabNavigation() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            const targetTab = e.target.getAttribute('data-tab');
            showTab(targetTab);
        });
    });
    
    function showTab(tabName) {
        // Î™®Îì† ÌÉ≠ Î≤ÑÌäºÏóêÏÑú active ÌÅ¥ÎûòÏä§ Ï†úÍ±∞
        tabButtons.forEach(btn => btn.classList.remove('active'));
        
        // Î™®Îì† ÌÉ≠ ÏΩòÌÖêÏ∏†ÏóêÏÑú active ÌÅ¥ÎûòÏä§ Ï†úÍ±∞
        tabContents.forEach(content => content.classList.remove('active'));
        
        // ÏÑ†ÌÉùÎêú ÌÉ≠ Î≤ÑÌäºÏóê active ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä
        const activeButton = document.querySelector(`[data-tab="${tabName}"]`);
        if (activeButton) {
            activeButton.classList.add('active');
        }
        
        // ÏÑ†ÌÉùÎêú ÌÉ≠ ÏΩòÌÖêÏ∏†Ïóê active ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä
        const activeContent = document.getElementById(`${tabName}-tab`);
        if (activeContent) {
            activeContent.classList.add('active');
        }
    }
    
    // Ï¥àÍ∏∞ ÌÉ≠ ÏÑ§Ï†ï (ÏΩòÏÜî Ï°∞ÏûëÎ≤ï)
    showTab('console');
}

function initSearchFunction() {
    const searchInput = document.getElementById('searchInput');
    if (!searchInput) return;
    
    // ÎîîÎ∞îÏö¥Ïä§ Ìï®Ïàò
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    const debouncedSearch = debounce(performSearch, 300);
    
    searchInput.addEventListener('input', (e) => {
        debouncedSearch(e.target.value);
    });
    
    searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            performSearch(e.target.value);
        }
    });
}

function performSearch(searchTerm) {
    const term = searchTerm.toLowerCase().trim();
    const cards = document.querySelectorAll('.card');
    
    // Ïù¥Ï†Ñ ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†úÍ±∞
    removeAllHighlights();
    
    if (!term) {
        // Í≤ÄÏÉâÏñ¥Í∞Ä ÏóÜÏúºÎ©¥ Î™®Îì† Ïπ¥Îìú ÌëúÏãú
        cards.forEach(card => {
            card.classList.remove('search-hidden');
        });
        return;
    }
    
    let foundResults = false;
    
    cards.forEach(card => {
        const cardText = card.textContent.toLowerCase();
        const hasMatch = cardText.includes(term);
        
        if (hasMatch) {
            card.classList.remove('search-hidden');
            highlightSearchTerm(card, term);
            foundResults = true;
        } else {
            card.classList.add('search-hidden');
        }
    });
    
    if (!foundResults) {
        console.log('Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§:', searchTerm);
    }
}

function highlightSearchTerm(element, searchTerm) {
    const walker = document.createTreeWalker(
        element,
        NodeFilter.SHOW_TEXT,
        {
            acceptNode: function(node) {
                if (node.parentNode.tagName === 'SCRIPT' || 
                    node.parentNode.tagName === 'STYLE' ||
                    node.parentNode.classList?.contains('search-highlight')) {
                    return NodeFilter.FILTER_REJECT;
                }
                return NodeFilter.FILTER_ACCEPT;
            }
        },
        false
    );
    
    const textNodes = [];
    let node;
    
    while (node = walker.nextNode()) {
        textNodes.push(node);
    }
    
    textNodes.forEach(textNode => {
        const text = textNode.textContent;
        const regex = new RegExp(`(${escapeRegExp(searchTerm)})`, 'gi');
        
        if (regex.test(text)) {
            const highlightedHTML = text.replace(regex, '<span class="search-highlight">$1</span>');
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = highlightedHTML;
            
            const parent = textNode.parentNode;
            while (tempDiv.firstChild) {
                parent.insertBefore(tempDiv.firstChild, textNode);
            }
            parent.removeChild(textNode);
        }
    });
}

function removeAllHighlights() {
    const highlights = document.querySelectorAll('.search-highlight');
    highlights.forEach(highlight => {
        const parent = highlight.parentNode;
        parent.replaceChild(document.createTextNode(highlight.textContent), highlight);
        parent.normalize();
    });
}

function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function initCalculators() {
    // DMX Í∞í Í≥ÑÏÇ∞Í∏∞
    const dmxInput = document.getElementById('dmxValue');
    const dmxResult = document.getElementById('percentResult');
    
    if (dmxInput && dmxResult) {
        dmxInput.addEventListener('input', () => {
            calculateDMXPercentage(dmxInput.value, dmxResult);
        });
        
        dmxInput.addEventListener('keyup', () => {
            calculateDMXPercentage(dmxInput.value, dmxResult);
        });
    }
    
    // RGB ÏÉâÏÉÅ Í≥ÑÏÇ∞Í∏∞
    const rgbRed = document.getElementById('rgbRed');
    const rgbGreen = document.getElementById('rgbGreen');
    const rgbBlue = document.getElementById('rgbBlue');
    const rgbResult = document.getElementById('rgbResult');
    
    if (rgbRed && rgbGreen && rgbBlue && rgbResult) {
        [rgbRed, rgbGreen, rgbBlue].forEach(input => {
            input.addEventListener('input', () => {
                calculateRGBColor(rgbRed.value, rgbGreen.value, rgbBlue.value, rgbResult);
            });
        });
    }
}

function calculateDMXPercentage(inputValue, resultElement) {
    const dmxValue = parseInt(inputValue);
    
    if (isNaN(dmxValue) || dmxValue < 0 || dmxValue > 255) {
        resultElement.innerHTML = '';
        return;
    }
    
    const percentage = Math.round((dmxValue / 255) * 100);
    const sliderDescription = getSliderDescription(percentage);
    
    resultElement.innerHTML = `
        <div style="margin-bottom: 8px;">
            <strong>DMX ${dmxValue}</strong> = <strong style="color: var(--color-primary);">${percentage}%</strong>
        </div>
        <div style="font-size: var(--font-size-sm); color: var(--color-text-secondary);">
            Ïä¨ÎùºÏù¥Îçî ÏúÑÏπò: ${sliderDescription}
        </div>
    `;
}

function calculateRGBColor(red, green, blue, resultElement) {
    const r = parseInt(red) || 0;
    const g = parseInt(green) || 0;
    const b = parseInt(blue) || 0;
    
    if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {
        resultElement.innerHTML = '';
        return;
    }
    
    const hexColor = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    const colorName = getColorName(r, g, b);
    
    resultElement.innerHTML = `
        <div style="display: flex; align-items: center; gap: 12px;">
            <div style="width: 40px; height: 40px; background-color: rgb(${r}, ${g}, ${b}); border: 1px solid var(--color-border); border-radius: var(--radius-sm);"></div>
            <div>
                <div><strong>RGB(${r}, ${g}, ${b})</strong></div>
                <div style="font-size: var(--font-size-sm); color: var(--color-text-secondary);">
                    ${hexColor} - ${colorName}
                </div>
            </div>
        </div>
    `;
}

function getSliderDescription(percentage) {
    if (percentage === 0) return 'ÏôÑÏ†ÑÌûà ÎÇ¥Î¶º (OFF)';
    if (percentage <= 10) return 'Í±∞Ïùò ÎÇ¥Î¶º';
    if (percentage <= 25) return '1/4 ÏßÄÏ†ê';
    if (percentage <= 50) return 'Ï§ëÍ∞Ñ ÏßÄÏ†ê';
    if (percentage <= 75) return '3/4 ÏßÄÏ†ê';
    if (percentage < 100) return 'Í±∞Ïùò Ïò¨Î¶º';
    return 'ÏôÑÏ†ÑÌûà Ïò¨Î¶º (MAX)';
}

function getColorName(r, g, b) {
    if (r >= 200 && g >= 200 && b >= 200) return 'Ìù∞ÏÉâÍ≥Ñ';
    if (r <= 50 && g <= 50 && b <= 50) return 'Í≤ÄÏùÄÏÉâÍ≥Ñ';
    if (r > g + 50 && r > b + 50) return 'Îπ®Í∞ÑÏÉâÍ≥Ñ';
    if (g > r + 50 && g > b + 50) return 'ÎÖπÏÉâÍ≥Ñ';
    if (b > r + 50 && b > g + 50) return 'ÌååÎûÄÏÉâÍ≥Ñ';
    if (r > 150 && g > 150 && b < 100) return 'ÎÖ∏ÎûÄÏÉâÍ≥Ñ';
    if (r > 150 && g < 100 && b > 150) return 'ÏûêÏ£ºÏÉâÍ≥Ñ';
    if (r < 100 && g > 150 && b > 150) return 'Ï≤≠Î°ùÏÉâÍ≥Ñ';
    if (r > 150 && g > 100 && b < 100) return 'Ï£ºÌô©ÏÉâÍ≥Ñ';
    return 'ÌòºÌï©ÏÉâ';
}

function initP1ControlPanel() {
    // P1 Ïä¨ÎùºÏù¥Îçî ÏöîÏÜåÎì§
    const sliders = {
        dimmer: document.getElementById('p1-dimmer'),
        strobe: document.getElementById('p1-strobe'),
        preset: document.getElementById('p1-preset'),
        red: document.getElementById('p1-red'),
        green: document.getElementById('p1-green'),
        blue: document.getElementById('p1-blue')
    };
    
    const valueDisplays = {
        dimmer: document.getElementById('p1-dimmer-value'),
        strobe: document.getElementById('p1-strobe-value'),
        preset: document.getElementById('p1-preset-value'),
        red: document.getElementById('p1-red-value'),
        green: document.getElementById('p1-green-value'),
        blue: document.getElementById('p1-blue-value')
    };
    
    const colorPreview = document.querySelector('.preview-box');
    
    // Í∞Å Ïä¨ÎùºÏù¥ÎçîÏóê Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    Object.keys(sliders).forEach(key => {
        const slider = sliders[key];
        const display = valueDisplays[key];
        
        if (slider && display) {
            slider.addEventListener('input', (e) => {
                const value = e.target.value;
                display.textContent = value;
                updateColorPreview();
                
                // Í∞íÏù¥ Î≥ÄÍ≤ΩÎê† Îïå Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º
                display.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    display.style.transform = 'scale(1)';
                }, 150);
            });
        }
    });
    
    function updateColorPreview() {
        const dimmer = parseInt(sliders.dimmer?.value || 0);
        const red = parseInt(sliders.red?.value || 0);
        const green = parseInt(sliders.green?.value || 0);
        const blue = parseInt(sliders.blue?.value || 0);
        
        // ÎßàÏä§ÌÑ∞ ÎîîÎ®∏ Ï†ÅÏö©
        const dimmerFactor = dimmer / 255;
        const finalRed = Math.round(red * dimmerFactor);
        const finalGreen = Math.round(green * dimmerFactor);
        const finalBlue = Math.round(blue * dimmerFactor);
        
        if (colorPreview) {
            colorPreview.style.backgroundColor = `rgb(${finalRed}, ${finalGreen}, ${finalBlue})`;
            colorPreview.classList.add('updating');
            setTimeout(() => {
                colorPreview.classList.remove('updating');
            }, 300);
        }
    }
    
    // Ï¥àÍ∏∞ ÏÉâÏÉÅ ÏÑ§Ï†ï
    updateColorPreview();
}

// P1 ÌîÑÎ¶¨ÏÖã Ìï®ÏàòÎì§ (Ï†ÑÏó≠ÏúºÎ°ú ÏÑ†Ïñ∏ÌïòÏó¨ HTMLÏóêÏÑú Ìò∏Ï∂ú Í∞ÄÎä•)
window.setP1Preset = function(preset) {
    const sliders = {
        dimmer: document.getElementById('p1-dimmer'),
        strobe: document.getElementById('p1-strobe'),
        preset: document.getElementById('p1-preset'),
        red: document.getElementById('p1-red'),
        green: document.getElementById('p1-green'),
        blue: document.getElementById('p1-blue')
    };
    
    const valueDisplays = {
        dimmer: document.getElementById('p1-dimmer-value'),
        strobe: document.getElementById('p1-strobe-value'),
        preset: document.getElementById('p1-preset-value'),
        red: document.getElementById('p1-red-value'),
        green: document.getElementById('p1-green-value'),
        blue: document.getElementById('p1-blue-value')
    };
    
    let values = {};
    
    switch (preset) {
        case 'white':
            values = { dimmer: 255, strobe: 0, preset: 0, red: 255, green: 255, blue: 255 };
            break;
        case 'red':
            values = { dimmer: 255, strobe: 0, preset: 0, red: 255, green: 0, blue: 0 };
            break;
        case 'green':
            values = { dimmer: 255, strobe: 0, preset: 0, red: 0, green: 255, blue: 0 };
            break;
        case 'blue':
            values = { dimmer: 255, strobe: 0, preset: 0, red: 0, green: 0, blue: 255 };
            break;
        case 'reset':
            values = { dimmer: 0, strobe: 0, preset: 0, red: 0, green: 0, blue: 0 };
            break;
        default:
            return;
    }
    
    // Ïä¨ÎùºÏù¥Îçî Í∞í ÏÑ§Ï†ï Î∞è ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
    Object.keys(values).forEach(key => {
        const slider = sliders[key];
        const display = valueDisplays[key];
        
        if (slider && display) {
            slider.value = values[key];
            display.textContent = values[key];
            
            // Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º
            display.style.transform = 'scale(1.2)';
            display.style.color = 'var(--color-success)';
            setTimeout(() => {
                display.style.transform = 'scale(1)';
                display.style.color = 'var(--color-primary)';
            }, 300);
        }
    });
    
    // ÏÉâÏÉÅ ÎØ∏Î¶¨Î≥¥Í∏∞ ÏóÖÎç∞Ïù¥Ìä∏
    setTimeout(() => {
        const dimmer = parseInt(sliders.dimmer?.value || 0);
        const red = parseInt(sliders.red?.value || 0);
        const green = parseInt(sliders.green?.value || 0);
        const blue = parseInt(sliders.blue?.value || 0);
        
        const dimmerFactor = dimmer / 255;
        const finalRed = Math.round(red * dimmerFactor);
        const finalGreen = Math.round(green * dimmerFactor);
        const finalBlue = Math.round(blue * dimmerFactor);
        
        const colorPreview = document.querySelector('.preview-box');
        if (colorPreview) {
            colorPreview.style.backgroundColor = `rgb(${finalRed}, ${finalGreen}, ${finalBlue})`;
            colorPreview.classList.add('updating');
            setTimeout(() => {
                colorPreview.classList.remove('updating');
            }, 300);
        }
    }, 100);
    
    // ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞±
    console.log(`P1 ÌîÑÎ¶¨ÏÖã Ï†ÅÏö©: ${preset}`, values);
};

function setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + Ïà´Ïûê ÌÇ§Î°ú ÌÉ≠ Ï†ÑÌôò
        if ((e.ctrlKey || e.metaKey) && e.key >= '1' && e.key <= '5') {
            e.preventDefault();
            const tabIndex = parseInt(e.key) - 1;
            const tabs = ['console', 'p1-device', 'led-spot', 'tips', 'troubleshoot'];
            
            if (tabs[tabIndex]) {
                const tabButton = document.querySelector(`[data-tab="${tabs[tabIndex]}"]`);
                if (tabButton) {
                    tabButton.click();
                }
            }
        }
        
        // Ctrl/Cmd + FÎ°ú Í≤ÄÏÉâÏ∞Ω Ìè¨Ïª§Ïä§
        if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
            e.preventDefault();
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.focus();
                searchInput.select();
            }
        }
        
        // P1 ÌîÑÎ¶¨ÏÖã Îã®Ï∂ïÌÇ§
        if (e.altKey) {
            switch (e.key) {
                case 'w':
                    e.preventDefault();
                    window.setP1Preset('white');
                    break;
                case 'r':
                    e.preventDefault();
                    window.setP1Preset('red');
                    break;
                case 'g':
                    e.preventDefault();
                    window.setP1Preset('green');
                    break;
                case 'b':
                    e.preventDefault();
                    window.setP1Preset('blue');
                    break;
                case '0':
                    e.preventDefault();
                    window.setP1Preset('reset');
                    break;
            }
        }
    });
}

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
function animateValue(element, start, end, duration = 500) {
    const startTime = performance.now();
    const change = end - start;
    
    const animate = (currentTime) => {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Ease-out Ïï†ÎãàÎ©îÏù¥ÏÖò
        const eased = 1 - Math.pow(1 - progress, 3);
        const current = start + (change * eased);
        
        element.textContent = Math.round(current);
        
        if (progress < 1) {
            requestAnimationFrame(animate);
        }
    };
    
    requestAnimationFrame(animate);
}

// DMX Ï£ºÏÜå Í≥ÑÏÇ∞ Ìï®Ïàò (P1Ïö©)
function calculateP1Address() {
    // P1ÏùÄ DMX 1-7Î≤à Í≥†Ï†ï
    return {
        device: 'P1 Ï°∞Î™ÖÍ∏∞',
        startAddress: 1,
        endAddress: 7,
        channels: [
            'Ï±ÑÎÑê 1: Master Dimmer',
            'Ï±ÑÎÑê 2: Strobe',
            'Ï±ÑÎÑê 3: Reserved (ÎØ∏ÏÇ¨Ïö©)',
            'Ï±ÑÎÑê 4: Preset Colors',
            'Ï±ÑÎÑê 5: Red',
            'Ï±ÑÎÑê 6: Green',
            'Ï±ÑÎÑê 7: Blue'
        ]
    };
}

// ÏÉâÏÉÅ Ï°∞Ìï© Ï†ÄÏû•/Î°úÎìú Í∏∞Îä• (Ìñ•ÌõÑ ÌôïÏû• Í∞ÄÎä•)
const savedPresets = {
    warmWhite: { r: 255, g: 200, b: 150, name: 'Îî∞ÎúªÌïú Ìù∞ÏÉâ' },
    coolWhite: { r: 200, g: 220, b: 255, name: 'Ï∞®Í∞ÄÏö¥ Ìù∞ÏÉâ' },
    amber: { r: 255, g: 150, b: 0, name: 'Ïï∞Î≤Ñ' },
    purple: { r: 200, g: 0, b: 255, name: 'Î≥¥ÎùºÏÉâ' },
    cyan: { r: 0, g: 200, b: 255, name: 'ÏãúÏïà' },
    lime: { r: 150, g: 255, b: 0, name: 'ÎùºÏûÑ' }
};

// ÎîîÎ≤ÑÍ∑∏ Î™®ÎìúÏóêÏÑú Ï∂îÍ∞Ä Ï†ïÎ≥¥ Ï∂úÎ†•
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    console.log('‚å®Ô∏è ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§:');
    console.log('  - Ctrl/Cmd + 1-5: ÌÉ≠ Ï†ÑÌôò');
    console.log('  - Ctrl/Cmd + F: Í≤ÄÏÉâÏ∞Ω Ìè¨Ïª§Ïä§');
    console.log('  - Alt + W: Ìù∞ÏÉâ ÌîÑÎ¶¨ÏÖã');
    console.log('  - Alt + R: Îπ®Í∞ÑÏÉâ ÌîÑÎ¶¨ÏÖã');
    console.log('  - Alt + G: ÎÖπÏÉâ ÌîÑÎ¶¨ÏÖã');
    console.log('  - Alt + B: ÌååÎûÄÏÉâ ÌîÑÎ¶¨ÏÖã');
    console.log('  - Alt + 0: Î¶¨ÏÖã');
    console.log('üéØ P1 Ï°∞Î™ÖÍ∏∞ Ï†ïÎ≥¥:', calculateP1Address());
    console.log('üé® Ï†ÄÏû•Îêú ÌîÑÎ¶¨ÏÖã:', savedPresets);
}

// ÏóêÎü¨ Ï≤òÎ¶¨
window.addEventListener('error', (e) => {
    console.error('Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïò§Î•ò:', e.error);
});

// ÌéòÏù¥ÏßÄ Ïñ∏Î°úÎìú Ïãú Ï†ïÎ¶¨
window.addEventListener('beforeunload', () => {
    console.log('Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏù¥ Ï¢ÖÎ£åÎê©ÎãàÎã§.');
});